# NOME: Leonardo Santos da Rocha | TIA: 32092261
# NOME: Vitor de Sousa Uema | TIA: 32028555

.data
	fim: .asciiz "\nFim"
	espaco: .asciiz " "
	quebra: .asciiz "\n"
	vetA: # Criando o vetor A
		.align 2 # Align 2 = Words
		.space 40 # 40 Bytes de espaço

	vetB: # Criando o vetor B
		.align 2 # Align 2 = Words
		.space 40 # 40 Bytes de espaço

	vetC: # Criando o vetor C (resultado de comparar A e B)
		.align 2 # Align 2 = Words
		.space 40 # 40 Bytes de espaço

.text
	li $t0, 0 # Criando o indice do vetor
	li $t2, 40 # Criando o espaço máximo dos vetores A, B e C

lacoA: # Laço para inserir no vetor A
	beq $t0, $t2, lacoBini # $t0 = $t2 vamos para lacoBini

	li $v0, 5 # Leitura de inteiros
	syscall # Syscall para executar a instrução anterior
	move $t1, $v0 # Movendo o valor de $v0 para $t1

	sw $t1, vetA($t0) # Armazenando o valor de $t1 no endereço vetA($t0)
	addi $t0, $t0, 4 # Próximo elemento do vetor A
	addi $t1, $t1, 1 # Simples
	j lacoA # Retorno para o laçoA

lacoBini: # Laço para inserir no vetor B
	li $t0, 0 # Resetando o valor de $t0

lacoB:
	beq $t0, $t2, comparaIni # $t0 = $t2 vamos para comparaIni

	li $v0, 5 # Leitura de inteiros
	syscall # Syscall para executar a instrução anterior
	move $t1, $v0 # Movendo o valor de $v0 para $t1

	sw $t1, vetB($t0) # Armazenando o valor de $t1 no endereço vetB($t0)
	addi $t0, $t0, 4 # Próximo elemento do vetor B
	addi $t1, $t1, 1 # -
	j lacoB # Retorno para o laçoB

comparaIni:
	li $t0, 0 # Resetando o valor de $t0

compara:
	beq $t0, $t2, printaA # $t0 = $t2 vamos para printa
	lw $t3, vetA($t0) # Carregando o conteúdo do índice em $t3
	lw $t4, vetB($t0) # Carregando o conteúdo do índice em $t4

	slt $t5, $t3, $t4 # Descobrindo o menor valor
	beqz $t5, menorB # Se $t4 < $t3, pulamos para menorB

menorA:
	sw $t4, vetC($t0) # Carregando o conteúdo do índice em $t4
	addi $t0, $t0, 4 # Próximo elemento do vetor A
	j compara # Voltando para o compara

menorB:
	sw $t3, vetC($t0) # Carregando o conteúdo do índice em $t3
	addi $t0, $t0, 4 # Próximo elemento do vetor B
	j compara # Voltando para o compara

printaA:

li $t0, 0

laco_printaA:

beq $t0, $t2, printaB
lw $t6, vetA($t0)

li $v0, 1
la $a0, ($t6)
syscall

li $v0, 4
la $a0, espaco
syscall

addi $t0, $t0, 4
j laco_printaA

printaB:

li $t0, 0
li $v0, 4
la $a0, quebra
syscall


laco_printaB:

beq $t0, $t2, printaC
lw $t6, vetB($t0)

li $v0, 1
la $a0, ($t6)
syscall

li $v0, 4
la $a0, espaco
syscall

addi $t0, $t0, 4
j laco_printaB

printaC:

li $t0, 0
li $v0, 4
la $a0, quebra
syscall

laco_printaC:

beq $t0, $t2, termino
lw $t6, vetC($t0)

li $v0, 1
la $a0, ($t6)
syscall

li $v0, 4
la $a0, espaco
syscall

addi $t0, $t0, 4
j laco_printaC

termino:

li $v0, 4
la $a0, fim
syscall